Index: Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\nAuthor: Tony L\r\nDate Created: March 3rd 2023\r\nLast Updated: May 4th 2023    \r\nPurpose: To learn more about extending data structures with inheritance, by using an example of a pet owner simulator, featuring cats and dogs, and various activities each the user can do.\r\n*/\r\n\r\nusing System.Text.Json;\r\nusing Data_Structures.classes;\r\n\r\nnamespace Data_Structures;\r\n\r\ninternal class MainClass\r\n{\r\n    private static void Main()\r\n    {\r\n        // setup variables\r\n        var days = 0;\r\n        var name = \"\";\r\n        var selection = 0;\r\n        var helper = new Helper();\r\n        Person player;\r\n\r\n        var colours = new List<Colour>();\r\n        var animals = new List<Animal>();\r\n        var foods = new List<Food>();\r\n        string[] species = { \"cat\", \"dog\" };\r\n\r\n        // all available options\r\n        var dailyOptions = new List<string>\r\n        {\r\n            \"Go to work.\", \"Play with your pet(s).\", \"Feed your pet.\", \"Go on a run with your pet(s).\",\r\n            \"List all your pet(s).\", \"Quit the game.\"\r\n        };\r\n\r\n        // load all default colours\r\n        var directory = @\".\\data\\colours\";\r\n        // loop through the files\r\n        foreach (var file in Directory.GetFiles(directory))\r\n        {\r\n            // load file info as a string\r\n            var jsonString = File.ReadAllText(@$\".\\{file}\");\r\n            // convert json to a class, and add to the list of colours\r\n            colours.Add(JsonSerializer.Deserialize<Colour>(jsonString)!);\r\n        }\r\n\r\n        // load all cats\r\n        directory = @\".\\data\\Cat\";\r\n        foreach (var file in Directory.GetFiles(directory))\r\n        {\r\n            // load file info as a string\r\n            var jsonString = File.ReadAllText(@$\".\\{file}\");\r\n            // convert json to a class, and add to the list of foods\r\n            animals.Add(JsonSerializer.Deserialize<Cat>(jsonString)!);\r\n        }\r\n\r\n        // load all dogs\r\n        directory = @\".\\data\\Dog\";\r\n        foreach (var file in Directory.GetFiles(directory))\r\n        {\r\n            // load file info as a string\r\n            var jsonString = File.ReadAllText(@$\".\\{file}\");\r\n            // convert json to a class, and add to the list of foods\r\n            animals.Add(JsonSerializer.Deserialize<Dog>(jsonString)!);\r\n        }\r\n\r\n        // load all default foods\r\n        directory = @\".\\data\\food\";\r\n        foreach (var file in Directory.GetFiles(directory))\r\n        {\r\n            // load file info as a string\r\n            var jsonString = File.ReadAllText(@$\".\\{file}\");\r\n            // convert json to a class, and add to the list of foods\r\n            foods.Add(JsonSerializer.Deserialize<Food>(jsonString)!);\r\n        }\r\n\r\n        // Intro to the program\r\n        Console.WriteLine(\r\n            \"Hi, and welcome to pet owner simulator! In this program, you'll be able to adopt pets, and live with them\");\r\n        Console.WriteLine(\"Do you already have a save?\");\r\n        var saveDecisionList = new List<string> { \"Yes\", \"No\" };\r\n        var saveDecision = helper.UserOptionsList(saveDecisionList);\r\n        switch (saveDecision)\r\n        {\r\n            // already have a save\r\n            case 1:\r\n            {\r\n                try\r\n                {\r\n                    // load the player data\r\n                    player = JsonSerializer.Deserialize<Person>(File.ReadAllText(@\".\\data\\people\\player.json\"))!;\r\n                }\r\n                catch (FileNotFoundException)\r\n                {\r\n                    // file doesn't exist, switch to the default case\r\n                    Console.WriteLine(\"Looks like you don't have a save already, making a new save!\");\r\n                    goto default;\r\n                }\r\n\r\n                break;\r\n            }\r\n            // dont have a save\r\n            default:\r\n                Console.WriteLine(\"Lets get started with your name:\");\r\n\r\n                // Loops until they have a valid input\r\n                var validInput = false;\r\n                while (!validInput)\r\n                {\r\n                    name = Console.ReadLine();\r\n                    if (name is not null) validInput = true;\r\n                }\r\n\r\n\r\n                // User chooses a pet\r\n                Console.WriteLine(\"===================================\");\r\n                Console.WriteLine($\"Now lets get you a pet, {name}\");\r\n                // get user to choose a pet\r\n                Console.WriteLine(\"Which pet do you want?\");\r\n\r\n                // get description of pets and add to an array\r\n                var descriptions = new List<string>();\r\n                foreach (var pet in animals) descriptions.Add(pet.Description());\r\n\r\n                // get them to choose a pet\r\n                selection = helper.UserOptionsList(descriptions);\r\n\r\n                var cat = animals[selection - 1] as Cat;\r\n\r\n                if (cat is not null)\r\n                {\r\n                    player = new Person(name!, new List<Cat> { cat }, new List<Dog>(), 0);\r\n                }\r\n                else\r\n                {\r\n                    var dog = animals[selection - 1] as Dog;\r\n                    player = new Person(name!, new List<Cat>(), new List<Dog> { dog }, 0);\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        // Game loop\r\n        var exit = false;\r\n\r\n        while (!exit)\r\n        {\r\n            days++;\r\n            // add furballs and squirrels chased\r\n            foreach (var pet in player.pets)\r\n                // once a week\r\n                if (days % 7 == 0)\r\n                {\r\n                    var cat = pet as Cat;\r\n                    if (cat is not null) cat.furballsCoughed++;\r\n                }\r\n                else\r\n                {\r\n                    var dog = pet as Dog;\r\n                    if (dog is not null) dog.squirrelsChased += 2;\r\n                }\r\n\r\n            // main menu\r\n            Console.WriteLine(\"===================================\");\r\n            Console.WriteLine($\"It is day {days}.\");\r\n            Console.WriteLine(\"What would you like to do?\");\r\n            var option = helper.UserOptionsList(dailyOptions);\r\n            Console.WriteLine(\"===================================\");\r\n            switch (option)\r\n            {\r\n                // work\r\n                case 1:\r\n                    // adds money\r\n                    player.money += 100;\r\n                    Console.WriteLine(\"You earned a hundred dollars from working!\");\r\n\r\n                    break;\r\n                // play\r\n                case 2:\r\n                    foreach (var pet in player.pets) pet.AnimalSound();\r\n\r\n                    break;\r\n                // feed\r\n                case 3:\r\n                    // list of all food names\r\n                    var foodNames = new List<string>();\r\n                    foreach (var food in foods)\r\n                        // add name of food\r\n                        foodNames.Add(food.name);\r\n\r\n                    Console.WriteLine(\"What food do you want to feed your pets?\");\r\n                    // ask for what they want to feed\r\n                    selection = helper.UserOptionsList(foodNames);\r\n\r\n                    // feed each cat\r\n                    Console.WriteLine($\"You fed your pets {foodNames[selection - 1]}\");\r\n                    foreach (var pet in player.pets)\r\n                        // feed each pet the food\r\n                        pet.Eat(foods[selection - 1]);\r\n\r\n                    break;\r\n                // exercise\r\n                case 4:\r\n                    foreach (var pet in player.pets) pet.Run();\r\n                    Console.WriteLine(\"Your pets get a good exercise.\");\r\n\r\n                    // randomly choose an animal \r\n                    var rnd = new Random();\r\n\r\n                    var animal = species[rnd.Next(species.Length)];\r\n\r\n                    Console.WriteLine(\r\n                        $@\"On your run with your pets, you come across a stray {animal}. Do you want to keep it?\");\r\n                    var keepDec = new List<string>\r\n                    {\r\n                        // ask yes or no\r\n                        \"Yes\",\r\n                        \"No\"\r\n                    };\r\n                    selection = helper.UserOptionsList(keepDec);\r\n                    // want to adopt\r\n                    if (selection == 1)\r\n                    {\r\n                        // add the animal to the players pets\r\n                        if (animal == \"cat\")\r\n                        {\r\n                            var cat = new Cat();\r\n                            player.pets.Add(cat);\r\n                            player.cats.Add(cat);\r\n                        }\r\n                        else if (animal == \"dog\")\r\n                        {\r\n                            var dog = new Dog();\r\n                            player.pets.Add(dog);\r\n                            player.dogs.Add(dog);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        Console.WriteLine($\"The {animal} runs away.\");\r\n                    }\r\n\r\n                    break;\r\n                // list all pets\r\n                case 5:\r\n                    Console.WriteLine(\"Here are all your pets:\");\r\n                    // loop through players cats, and get them to print the description\r\n                    foreach (var pet in player.pets)\r\n                    {\r\n                        var cat = pet as Cat;\r\n\r\n                        if (cat is not null)\r\n                            Console.WriteLine(pet.Description() +\r\n                                              $\" They have coughed up {cat.furballsCoughed} fur balls over their life.\");\r\n\r\n                        var dog = pet as Dog;\r\n                        if (dog is not null)\r\n                            Console.WriteLine(pet.Description() +\r\n                                              $\" They have chased {dog.squirrelsChased} squirrels over their life.\");\r\n                    }\r\n\r\n                    break;\r\n                // quit\r\n                case 6:\r\n                    // exit the while loop\r\n                    exit = true;\r\n                    // save all cats \r\n                    foreach (var pet in player.pets) pet.SaveAnimal();\r\n                    player.SavePerson();\r\n\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Citations: \r\n// Microsoft, Redmond, WA, USA. C# documentation. (2023). Accessed: Mar. 10, 2023. [Online]. Available: https://learn.microsoft.com/en-us/dotnet/csharp/ 
===================================================================
diff --git a/Program.cs b/Program.cs
--- a/Program.cs	
+++ b/Program.cs	
@@ -264,7 +264,7 @@
                 case 6:
                     // exit the while loop
                     exit = true;
-                    // save all cats 
+                    // save all pets 
                     foreach (var pet in player.pets) pet.SaveAnimal();
                     player.SavePerson();
 
Index: obj/rider.project.restore.info
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>16832072959905967
===================================================================
diff --git a/obj/rider.project.restore.info b/obj/rider.project.restore.info
--- a/obj/rider.project.restore.info	
+++ b/obj/rider.project.restore.info	
@@ -1,1 +1,1 @@
-16832072959905967
\ No newline at end of file
+16842422735842493
\ No newline at end of file
